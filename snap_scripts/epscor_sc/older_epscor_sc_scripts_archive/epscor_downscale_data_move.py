import pandas as pd
import os, glob


class Files( object ):
	def __init__( self, base_dir, *args, **kwargs ):
		'''
		list the files from the nested directory structure
		generated by SYNDA application and access of the ESGF CMIP5 data holdings
		'''
		self.base_dir = base_dir
		self.files = self.list_files( )
		self.df = self._to_dataframe( )

	def list_files( self ):
		return [ os.path.join( root, fn ) for root, subs, files in os.walk( self.base_dir ) \
					if len( files ) > 0 for fn in files if fn.endswith( '.nc' ) ]
	@staticmethod
	def _split_fn( fn ):
		return os.path.basename( fn ).split( '.' )[0].split( '_' )
	@staticmethod
	def f( x ):
		'''
		take the files dataframe and split the years
		into begin year/month and end year/month and 
		add new columns to a new dataframe
		'''
		begin, end = x[ 'years' ].split( '-' )
		x['begin_month'] = begin[4:] 
		x['begin_year'] = begin[:4]
		x['end_month'] = end[4:]
		x['end_year'] = end[:4]
		return x
	def _to_dataframe( self ):
		import pandas as pd
		out = []
		for fn in self.files:
			variable, cmor_table, model, scenario, experiment, years = self._split_fn( fn )
			out.append( {'fn':fn, 'variable':variable, 'cmor_table':cmor_table, \
						'model':model, 'scenario':scenario, 'experiment':experiment, 'years':years } )
			column_order = ['fn', 'variable', 'cmor_table', 'model', 'scenario', 'experiment', 'years']
		return pd.DataFrame( out, columns=column_order ).apply( self.f, axis=1 )

def f( x ):
	'''
	move files into a new directory from the ESGF
	synda download db that is problematic to use.

	it is important to make sure you are grabbing the right
	VERSION of the data, which may require a rewrite of this
	function to only take the LATEST version.  

	The current tasmin/tasmax moving had only one version for each
	data group, so I just move all of them to this new dir.
	'''
	import shutil
	new_dir = os.path.join( new_base_dir, x.model, x.scenario, x.variable )
	if not os.path.exists( new_dir ):
		os.makedirs( new_dir )
	base_fn = os.path.basename( x.fn )
	new_fn = os.path.join( new_dir, base_fn )
	if not os.path.exists( new_fn ):
		shutil.copy( x.fn, new_fn )
	return new_fn

# run the above function and move the files to a new directory
base_dirs = [ '/workspace/Shared/Tech_Projects/ESGF_Data_Access/project_data/tasmin_tasmax_access/docker_move_june2016', '/workspace/Shared/Tech_Projects/ESGF_Data_Access/project_data/tasmin_tasmax_access/docker_move/synda/sdt/data' ]
new_base_dir = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data/raw_cmip5_tmp'
for base_dir in base_dirs:
	files = Files( base_dir )
	out_names = files.df.apply( f, axis=1 )

# # # # #
# NOTES AND EXTRAS:
# -------------------
# # this is how we can get the unique versions for each of the groups if we want to be sure that we are choosing the latest one
# df.groupby( df.model + df.scenario + df.variable ).apply( lambda x: x.version.unique() )
# -------------------
# # # # #

